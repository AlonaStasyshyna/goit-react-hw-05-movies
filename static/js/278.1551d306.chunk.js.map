{"version":3,"file":"static/js/278.1551d306.chunk.js","mappings":"8PAAaA,EAAS,SAAAC,GAAM,OAC1BA,EAAOC,KAAI,kBAAyC,CAAEC,GAA3C,EAAGA,GAA4CC,MAA/C,EAAOA,MAA+CC,OAAtD,EAAcC,YAAd,GADe,ECGtBC,EAAU,mCAChBC,EAAAA,GAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAmB,mCAAG,uGACVD,EAAAA,EAAAA,IAAM,sBAAuB,CAClDE,OAAQ,CAAEH,QAAAA,KAFqB,uBACzBI,EADyB,EACzBA,KADyB,kBAK1BX,EAAOW,EAAKC,UALc,2CAAH,qDAQnBC,EAAgB,mCAAG,WAAMC,GAAN,0FACPN,EAAAA,EAAAA,IAAM,gBAAiB,CAC5CE,OAAQ,CAAEH,QAAAA,EAASO,MAAAA,KAFS,uBACtBH,EADsB,EACtBA,KADsB,kBAKvBX,EAAOW,EAAKC,UALW,2CAAH,sDAQhBG,EAAc,mCAAG,WAAOZ,EAAIa,GAAX,wFACTR,EAAAA,EAAAA,IAAM,UAAD,OAAWL,GAAX,OAAgBa,GAAa,CACnDN,OAAQ,CAAEH,QAAAA,KAFgB,cACtBU,EADsB,yBAKrBA,EAAKN,MALgB,2CAAH,uD,gJCpBdO,EAAOC,EAAAA,GAAAA,IAAH,2EAMJC,EAAcD,EAAAA,GAAAA,IAAH,kFAMXE,EAASF,EAAAA,GAAAA,GAAH,4E,SCXNG,EAAgB,SAAC,GAAiD,IAA/CjB,EAA8C,EAA9CA,OAAQD,EAAsC,EAAtCA,MAAOmB,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OACzDC,EAAmBC,KAAKC,MAAe,GAATL,GAEpC,OACE,UAACL,EAAD,YACE,gBACEW,IACExB,EAAM,0CACiCA,GACnC,gHAENyB,IAAK1B,EACL2B,MAAM,QACNC,OAAO,WAGT,UAACZ,EAAD,YACE,wBAAKhB,KACL,wCAAgBsB,EAAhB,QAEA,sCACA,uBAAIF,KAEJ,mCACCC,GACC,SAACJ,EAAD,UACGI,EAAOvB,KAAI,gBAAGC,EAAH,EAAGA,GAAI8B,EAAP,EAAOA,KAAP,OACV,wBAAcA,GAAL9B,EADC,OAKd,6DAKT,E,SCpCY+B,EAAWf,EAAAA,GAAAA,GAAH,4HAQRgB,GAAWhB,EAAAA,EAAAA,IAAOiB,EAAAA,GAAPjB,CAAH,4CCRRkB,EAAgB,WAC3B,IAAMC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,4BACE,mDACA,UAACL,EAAD,YACE,yBACE,SAACC,EAAD,CAAUK,GAAG,OAAOC,MAAOH,EAASG,MAApC,qBAIF,yBACE,SAACN,EAAD,CAAUK,GAAG,UAAUC,MAAOH,EAASG,MAAvC,4BAOT,EClBYC,EAAY,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACpBL,GAAWC,EAAAA,EAAAA,MACXK,GAAaC,EAAAA,EAAAA,MAGjBpB,EAKEkB,EALFlB,OACArB,EAIEuC,EAJFvC,MACAoB,EAGEmB,EAHFnB,SACanB,EAEXsC,EAFFrC,YACciB,EACZoB,EADFG,aAGF,OACE,gCACE,mBACEC,KAAK,SACLC,QAAS,wBAAMJ,GAAmB,OAARN,QAAQ,IAARA,GAAA,UAAAA,EAAUG,aAAV,eAAiBQ,OAAQ,IAA1C,EAFX,6BAOA,SAAC3B,EAAD,CACEjB,OAAQA,EACRD,MAAOA,EACPmB,OAAQA,EACRC,SAAUA,EACVC,OAAQA,KAEV,SAACY,EAAD,MAGL,ECHD,EA3BqB,WACnB,OAA0Ba,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOP,EAAP,KAAcQ,EAAd,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAWR,OATAE,EAAAA,EAAAA,YAAU,WACRL,GAAa,IAEbtC,EAAAA,EAAAA,IAAeyC,EAAS,IACrBG,KAAKR,GACLS,MAAML,GACNM,QAAQR,GAAa,GACzB,GAAE,CAACG,KAGF,gCACGJ,IAAa,SAACU,EAAA,EAAD,IACbnB,IAAS,SAACD,EAAD,CAAWC,MAAOA,IAC3BW,IAAS,yDAEV,SAAC,KAAD,MAGL,C","sources":["utils/mapper.js","fetchApi/fetchApi.js","components/MovieItem/MovieItemCard/MovieItemCard.styled.js","components/MovieItem/MovieItemCard/MovieItemCard.jsx","components/MovieItem/MovieItemInfo/MovieItemInfo.styled.js","components/MovieItem/MovieItemInfo/MovieItemInfo.jsx","components/MovieItem/MovieItem.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["export const mapper = movies =>\n  movies.map(({ id, title, poster_path: poster }) => ({ id, title, poster }));\n","import axios from 'axios';\nimport { mapper } from 'utils/mapper';\n\nconst api_key = 'f2adf6f643aa7936267884505488a932';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios('/trending/movie/day', {\n    params: { api_key },\n  });\n\n  return mapper(data.results);\n};\n\nexport const fetchSearchMovie = async query => {\n  const { data } = await axios('/search/movie', {\n    params: { api_key, query },\n  });\n\n  return mapper(data.results);\n};\n\nexport const fetchMovieById = async (id, paramName) => {\n  const resp = await axios(`/movie/${id}${paramName}`, {\n    params: { api_key },\n  });\n\n  return resp.data;\n};\n","import styled from 'styled-components';\n\nexport const Card = styled.div`\n  display: flex;\n  gap: 20px;\n  margin: 10px 0;\n`;\n\nexport const Description = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n`;\n\nexport const Genres = styled.ul`\n  display: flex;\n  gap: 6px;\n  list-style: none;\n`;\n","import PropTypes from 'prop-types';\nimport { Card, Description, Genres } from './MovieItemCard.styled';\n\nexport const MovieItemCard = ({ poster, title, rating, overview, genres }) => {\n  const ratingPercentage = Math.round(rating * 10);\n\n  return (\n    <Card>\n      <img\n        src={\n          poster\n            ? `https://image.tmdb.org/t/p/w500/${poster}`\n            : 'https://phonoteka.org/uploads/posts/2021-05/1619955766_15-phonoteka_org-p-svetlo-serii-fon-dlya-storis-17.jpg'\n        }\n        alt={title}\n        width=\"150px\"\n        height=\"225px\"\n      />\n\n      <Description>\n        <h2>{title}</h2>\n        <p>User score: {ratingPercentage}%</p>\n\n        <h3>Overview</h3>\n        <p>{overview}</p>\n\n        <h4>Genres</h4>\n        {genres ? (\n          <Genres>\n            {genres.map(({ id, name }) => (\n              <li key={id}>{name}</li>\n            ))}\n          </Genres>\n        ) : (\n          <p>No information about genres.</p>\n        )}\n      </Description>\n    </Card>\n  );\n};\n\nMovieItemCard.propTypes = {\n  poster: PropTypes.string,\n  title: PropTypes.string,\n  rating: PropTypes.number,\n  overview: PropTypes.string,\n  genres: PropTypes.array,\n};\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const InfoList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n  margin-top: 6px;\n  margin-left: 20px;\n`;\n\nexport const InfoLink = styled(Link)`\n  color: darkblue;\n`;\n","import { useLocation } from 'react-router-dom';\nimport { InfoList, InfoLink } from './MovieItemInfo.styled';\n\nexport const MovieItemInfo = () => {\n  const location = useLocation();\n\n  return (\n    <div>\n      <p>Additional information</p>\n      <InfoList>\n        <li>\n          <InfoLink to=\"cast\" state={location.state}>\n            Cast\n          </InfoLink>\n        </li>\n        <li>\n          <InfoLink to=\"reviews\" state={location.state}>\n            Reviews\n          </InfoLink>\n        </li>\n      </InfoList>\n    </div>\n  );\n};\n","import { useLocation, useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { MovieItemCard } from './MovieItemCard/MovieItemCard';\nimport { MovieItemInfo } from './MovieItemInfo/MovieItemInfo';\n\nexport const MovieItem = ({ movie }) => {\n  const location = useLocation();\n  const navigation = useNavigate();\n\n  const {\n    genres,\n    title,\n    overview,\n    poster_path: poster,\n    vote_average: rating,\n  } = movie;\n\n  return (\n    <section>\n      <button\n        type=\"button\"\n        onClick={() => navigation(location?.state?.from || '/')}\n      >\n        &#8592; Go back\n      </button>\n\n      <MovieItemCard\n        poster={poster}\n        title={title}\n        rating={rating}\n        overview={overview}\n        genres={genres}\n      />\n      <MovieItemInfo />\n    </section>\n  );\n};\n\nMovieItem.propTypes = {\n  movie: PropTypes.object.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { Outlet, useParams } from 'react-router-dom';\nimport { fetchMovieById } from 'fetchApi/fetchApi';\nimport { Loader } from 'components/Loader/Loader';\nimport { MovieItem } from 'components/MovieItem/MovieItem';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    fetchMovieById(movieId, '')\n      .then(setMovie)\n      .catch(setError)\n      .finally(setIsLoading(false));\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {movie && <MovieItem movie={movie} />}\n      {error && <p>Ooops! Something went wrong.</p>}\n\n      <Outlet />\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["mapper","movies","map","id","title","poster","poster_path","api_key","axios","fetchTrendingMovies","params","data","results","fetchSearchMovie","query","fetchMovieById","paramName","resp","Card","styled","Description","Genres","MovieItemCard","rating","overview","genres","ratingPercentage","Math","round","src","alt","width","height","name","InfoList","InfoLink","Link","MovieItemInfo","location","useLocation","to","state","MovieItem","movie","navigation","useNavigate","vote_average","type","onClick","from","useState","setMovie","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","then","catch","finally","Loader"],"sourceRoot":""}