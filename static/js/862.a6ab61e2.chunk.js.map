{"version":3,"file":"static/js/862.a6ab61e2.chunk.js","mappings":"0PAEaA,EAAOC,EAAAA,GAAAA,GAAH,6HAQJC,EAAQD,EAAAA,GAAAA,GAAH,wD,SCPLE,EAAa,SAAC,GAA0B,IAAdC,EAAa,EAAvBC,OAAUD,KACrC,OACE,8BACGA,EAAKE,QACJ,SAACN,EAAD,UACGI,EAAKG,KAAI,gBAAGC,EAAH,EAAGA,GAAkBC,EAArB,EAAOC,aAAuBC,EAA9B,EAA8BA,KAAMC,EAApC,EAAoCA,UAApC,OACR,UAACV,EAAD,YACE,gBACEW,IACEJ,EAAO,0CACgCA,GACnC,sGAENK,IAAKH,EACLI,MAAM,UAGR,4BACE,uBAAIJ,KACJ,uCAAeC,UAbPJ,EADJ,OAoBZ,+CAIP,ECDD,EAzBa,WACX,OAA4BQ,EAAAA,EAAAA,UAAS,MAArC,eAAOX,EAAP,KAAeY,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAWR,OATAE,EAAAA,EAAAA,YAAU,WACRL,GAAa,IAEbM,EAAAA,EAAAA,IAAeH,EAAS,YACrBI,KAAKT,GACLU,MAAMN,GACNO,QAAQT,GAAa,GACzB,GAAE,CAACG,KAGF,gCACGJ,IAAa,SAACW,EAAA,EAAD,IACbxB,IAAU,SAACF,EAAD,CAAYE,OAAQA,IAC9Be,IAAS,0DAGf,C,8IC7BYU,EAAS,SAAAC,GAAM,OAC1BA,EAAOxB,KAAI,kBAAyC,CAAEC,GAA3C,EAAGA,GAA4CwB,MAA/C,EAAOA,MAA+CC,OAAtD,EAAcC,YAAd,GADe,ECGtBC,EAAU,mCAChBC,EAAAA,GAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAmB,mCAAG,uGACVD,EAAAA,EAAAA,IAAM,sBAAuB,CAClDE,OAAQ,CAAEH,QAAAA,KAFqB,uBACzBI,EADyB,EACzBA,KADyB,kBAK1BT,EAAOS,EAAKC,UALc,2CAAH,qDAQnBC,EAAgB,mCAAG,WAAMC,GAAN,0FACPN,EAAAA,EAAAA,IAAM,gBAAiB,CAC5CE,OAAQ,CAAEH,QAAAA,EAASO,MAAAA,KAFS,uBACtBH,EADsB,EACtBA,KADsB,kBAKvBT,EAAOS,EAAKC,UALW,2CAAH,sDAQhBf,EAAc,mCAAG,WAAOjB,EAAImC,GAAX,wFACTP,EAAAA,EAAAA,IAAM,UAAD,OAAW5B,GAAX,OAAgBmC,GAAa,CACnDL,OAAQ,CAAEH,QAAAA,KAFgB,cACtBS,EADsB,yBAKrBA,EAAKL,MALgB,2CAAH,uD","sources":["components/Cast/ActorsList/ActorsList.styled.js","components/Cast/ActorsList/ActorsList.jsx","components/Cast/Cast.jsx","utils/mapper.js","fetchApi/fetchApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 15px;\n  list-style: none;\n`;\n\nexport const Actor = styled.li`\n  display: flex;\n  gap: 15px;\n`;\n","import PropTypes from 'prop-types';\nimport { List, Actor } from './ActorsList.styled';\n\nexport const ActorsList = ({ actors: { cast } }) => {\n  return (\n    <>\n      {cast.length ? (\n        <List>\n          {cast.map(({ id, profile_path: profile, name, character }) => (\n            <Actor key={id}>\n              <img\n                src={\n                  profile\n                    ? `https://image.tmdb.org/t/p/w500/${profile}`\n                    : 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT9eQEsbMk4HtIB82kLWbDvlzALPtbBOTgSLA&usqp=CAU'\n                }\n                alt={name}\n                width=\"64px\"\n              />\n\n              <div>\n                <p>{name}</p>\n                <p>Character: {character}</p>\n              </div>\n            </Actor>\n          ))}\n        </List>\n      ) : (\n        <p>No actors to show.</p>\n      )}\n    </>\n  );\n};\n\nActorsList.propTypes = {\n  actors: PropTypes.object,\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieById } from 'fetchApi/fetchApi';\nimport { Loader } from 'components/Loader/Loader';\nimport { ActorsList } from './ActorsList/ActorsList';\n\nconst Cast = () => {\n  const [actors, setActors] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    fetchMovieById(movieId, '/credits')\n      .then(setActors)\n      .catch(setError)\n      .finally(setIsLoading(false));\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {actors && <ActorsList actors={actors} />}\n      {error && <p>No information about actors.</p>}\n    </>\n  );\n};\n\nexport default Cast;\n","export const mapper = movies =>\n  movies.map(({ id, title, poster_path: poster }) => ({ id, title, poster }));\n","import axios from 'axios';\nimport { mapper } from 'utils/mapper';\n\nconst api_key = 'f2adf6f643aa7936267884505488a932';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios('/trending/movie/day', {\n    params: { api_key },\n  });\n\n  return mapper(data.results);\n};\n\nexport const fetchSearchMovie = async query => {\n  const { data } = await axios('/search/movie', {\n    params: { api_key, query },\n  });\n\n  return mapper(data.results);\n};\n\nexport const fetchMovieById = async (id, paramName) => {\n  const resp = await axios(`/movie/${id}${paramName}`, {\n    params: { api_key },\n  });\n\n  return resp.data;\n};\n"],"names":["List","styled","Actor","ActorsList","cast","actors","length","map","id","profile","profile_path","name","character","src","alt","width","useState","setActors","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","fetchMovieById","then","catch","finally","Loader","mapper","movies","title","poster","poster_path","api_key","axios","fetchTrendingMovies","params","data","results","fetchSearchMovie","query","paramName","resp"],"sourceRoot":""}