{"version":3,"file":"static/js/5.851530ed.chunk.js","mappings":"2OAEaA,E,OAAOC,GAAAA,GAAH,8H,SCCJC,EAAc,SAAC,GAA8B,IAAjBC,EAAgB,EAA3BC,QAAWD,QACvC,OACE,8BACGA,EAAQE,QACP,SAACL,EAAD,UACGG,EAAQG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,qCAAaD,MACb,uBAAIC,MAFGF,EADE,OAQf,gDAIP,ECWD,EAzBgB,WACd,OAA8BG,EAAAA,EAAAA,UAAS,MAAvC,eAAON,EAAP,KAAgBO,EAAhB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAWR,OATAE,EAAAA,EAAAA,YAAU,WACRL,GAAa,IAEbM,EAAAA,EAAAA,IAAeH,EAAS,YACrBI,KAAKT,GACLU,MAAMN,GACNO,QAAQT,GAAa,GACzB,GAAE,CAACG,KAGF,gCACGJ,IAAa,SAACW,EAAA,EAAD,IACbnB,IAAW,SAACF,EAAD,CAAaE,QAASA,IACjCU,IAAS,iDAGf,C,8IC7BYU,EAAS,SAAAC,GAAM,OAC1BA,EAAOnB,KAAI,kBAAyC,CAAEC,GAA3C,EAAGA,GAA4CmB,MAA/C,EAAOA,MAA+CC,OAAtD,EAAcC,YAAd,GADe,ECGtBC,EAAU,mCAChBC,EAAAA,GAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAmB,mCAAG,uGACVD,EAAAA,EAAAA,IAAM,sBAAuB,CAClDE,OAAQ,CAAEH,QAAAA,KAFqB,uBACzBI,EADyB,EACzBA,KADyB,kBAK1BT,EAAOS,EAAK9B,UALc,2CAAH,qDAQnB+B,EAAgB,mCAAG,WAAMC,GAAN,0FACPL,EAAAA,EAAAA,IAAM,gBAAiB,CAC5CE,OAAQ,CAAEH,QAAAA,EAASM,MAAAA,KAFS,uBACtBF,EADsB,EACtBA,KADsB,kBAKvBT,EAAOS,EAAK9B,UALW,2CAAH,sDAQhBgB,EAAc,mCAAG,WAAOZ,EAAI6B,GAAX,wFACTN,EAAAA,EAAAA,IAAM,UAAD,OAAWvB,GAAX,OAAgB6B,GAAa,CACnDJ,OAAQ,CAAEH,QAAAA,KAFgB,cACtBQ,EADsB,yBAKrBA,EAAKJ,MALgB,2CAAH,uD","sources":["components/Reviews/ReviewsList/ReviewsList.styled.js","components/Reviews/ReviewsList/ReviewsList.jsx","components/Reviews/Reviews.jsx","utils/mapper.js","fetchApi/fetchApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 15px;\n  margin-left: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { List } from './ReviewsList.styled';\n\nexport const ReviewsList = ({ reviews: { results } }) => {\n  return (\n    <>\n      {results.length ? (\n        <List>\n          {results.map(({ id, author, content }) => (\n            <li key={id}>\n              <h4>Author: {author}</h4>\n              <p>{content}</p>\n            </li>\n          ))}\n        </List>\n      ) : (\n        <p>No reviews to show.</p>\n      )}\n    </>\n  );\n};\n\nReviewsList.propTypes = {\n  reviews: PropTypes.object,\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieById } from 'fetchApi/fetchApi';\nimport { Loader } from 'components/Loader/Loader';\nimport { ReviewsList } from './ReviewsList/ReviewsList';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    fetchMovieById(movieId, '/reviews')\n      .then(setReviews)\n      .catch(setError)\n      .finally(setIsLoading(false));\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {reviews && <ReviewsList reviews={reviews} />}\n      {error && <p>No reviews to show.</p>}\n    </>\n  );\n};\n\nexport default Reviews;\n","export const mapper = movies =>\n  movies.map(({ id, title, poster_path: poster }) => ({ id, title, poster }));\n","import axios from 'axios';\nimport { mapper } from 'utils/mapper';\n\nconst api_key = 'f2adf6f643aa7936267884505488a932';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios('/trending/movie/day', {\n    params: { api_key },\n  });\n\n  return mapper(data.results);\n};\n\nexport const fetchSearchMovie = async query => {\n  const { data } = await axios('/search/movie', {\n    params: { api_key, query },\n  });\n\n  return mapper(data.results);\n};\n\nexport const fetchMovieById = async (id, paramName) => {\n  const resp = await axios(`/movie/${id}${paramName}`, {\n    params: { api_key },\n  });\n\n  return resp.data;\n};\n"],"names":["List","styled","ReviewsList","results","reviews","length","map","id","author","content","useState","setReviews","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","fetchMovieById","then","catch","finally","Loader","mapper","movies","title","poster","poster_path","api_key","axios","fetchTrendingMovies","params","data","fetchSearchMovie","query","paramName","resp"],"sourceRoot":""}