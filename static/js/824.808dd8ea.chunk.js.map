{"version":3,"file":"static/js/824.808dd8ea.chunk.js","mappings":"kNAGaA,EAAOC,EAAAA,GAAAA,GAAH,6HAQJC,GAAYD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,4C,SCPTG,EAAa,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAC/BC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,gCACGH,IAAY,wBAAKA,KAElB,SAACL,EAAD,UACGM,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACV,yBACE,SAACT,EAAD,CAAWU,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMP,GAA/C,SACGI,KAFID,EADC,QAUnB,C,8ICtBYK,EAAS,SAAAT,GAAM,OAC1BA,EAAOG,KAAI,kBAAyC,CAAEC,GAA3C,EAAGA,GAA4CC,MAA/C,EAAOA,MAA+CK,OAAtD,EAAcC,YAAd,GADe,ECGtBC,EAAU,mCAChBC,EAAAA,GAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAmB,mCAAG,uGACVD,EAAAA,EAAAA,IAAM,sBAAuB,CAClDE,OAAQ,CAAEH,QAAAA,KAFqB,uBACzBI,EADyB,EACzBA,KADyB,kBAK1BP,EAAOO,EAAKC,UALc,2CAAH,qDAQnBC,EAAgB,mCAAG,WAAMC,GAAN,0FACPN,EAAAA,EAAAA,IAAM,gBAAiB,CAC5CE,OAAQ,CAAEH,QAAAA,EAASO,MAAAA,KAFS,uBACtBH,EADsB,EACtBA,KADsB,kBAKvBP,EAAOO,EAAKC,UALW,2CAAH,sDAQhBG,EAAc,mCAAG,WAAOhB,EAAIiB,GAAX,wFACTR,EAAAA,EAAAA,IAAM,UAAD,OAAWT,GAAX,OAAgBiB,GAAa,CACnDN,OAAQ,CAAEH,QAAAA,KAFgB,cACtBU,EADsB,yBAKrBA,EAAKN,MALgB,2CAAH,uD,6HCpBdO,EAAa,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAU3B,OACE,kBAAMC,SAVW,SAAAC,GACjBA,EAAEC,iBAEF,IAAMC,EAAUF,EAAEG,OAAOC,SAASC,YAA5BH,MACNJ,EAAaI,EAAMI,cAAcC,QAEjCP,EAAEG,OAAOC,SAASC,YAAYH,MAAQ,EACvC,EAGC,WACE,kBAAOM,KAAK,OAAOC,KAAK,iBACxB,mBAAQD,KAAK,SAAb,sBAGL,E,SC0BD,EArCmB,WACjB,OAAwCE,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEM1B,EAAQyB,EAAaE,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WACJ5B,IACFqB,GAAa,IAEbtB,EAAAA,EAAAA,IAAiBC,GACd6B,KAAKV,GACLW,MAAMP,GACNQ,QAAQV,GAAa,IAI3B,GAAE,CAACrB,IAMJ,OACE,iCACE,SAACI,EAAD,CAAYC,aANK,SAAAO,GACnBc,EAAgB,CAAE1B,MAAOY,GAC1B,IAMIQ,IAAa,SAACY,EAAA,EAAD,IACbd,IAAgB,SAACvC,EAAA,EAAD,CAAYE,OAAQqC,IACpCI,IAAS,0DAGf,C","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","utils/mapper.js","fetchApi/fetchApi.js","components/SearchForm/SearchForm.jsx","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n  margin-top: 10px;\n  margin-left: 20px;\n`;\n\nexport const MovieLink = styled(Link)`\n  color: darkblue;\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { List, MovieLink } from './MoviesList.styled';\n\nexport const MoviesList = ({ listName, movies }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      {listName && <h1>{listName}</h1>}\n\n      <List>\n        {movies.map(({ id, title }) => (\n          <li key={id}>\n            <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n              {title}\n            </MovieLink>\n          </li>\n        ))}\n      </List>\n    </>\n  );\n};\n\nMoviesList.propTypes = {\n  listName: PropTypes.string,\n  movies: PropTypes.array.isRequired,\n};\n","export const mapper = movies =>\n  movies.map(({ id, title, poster_path: poster }) => ({ id, title, poster }));\n","import axios from 'axios';\nimport { mapper } from 'utils/mapper';\n\nconst api_key = 'f2adf6f643aa7936267884505488a932';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios('/trending/movie/day', {\n    params: { api_key },\n  });\n\n  return mapper(data.results);\n};\n\nexport const fetchSearchMovie = async query => {\n  const { data } = await axios('/search/movie', {\n    params: { api_key, query },\n  });\n\n  return mapper(data.results);\n};\n\nexport const fetchMovieById = async (id, paramName) => {\n  const resp = await axios(`/movie/${id}${paramName}`, {\n    params: { api_key },\n  });\n\n  return resp.data;\n};\n","import PropTypes from 'prop-types';\n\nexport const SearchForm = ({ handleSubmit }) => {\n  const submitForm = e => {\n    e.preventDefault();\n\n    let { value } = e.target.elements.searchQuery;\n    handleSubmit(value.toLowerCase().trim());\n\n    e.target.elements.searchQuery.value = '';\n  };\n\n  return (\n    <form onSubmit={submitForm}>\n      <input type=\"text\" name=\"searchQuery\" />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nSearchForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Loader } from 'components/Loader/Loader';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { fetchSearchMovie } from 'fetchApi/fetchApi';\n\nconst MoviesPage = () => {\n  const [searchMovies, setSearchMovies] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (query) {\n      setIsLoading(true);\n\n      fetchSearchMovie(query)\n        .then(setSearchMovies)\n        .catch(setError)\n        .finally(setIsLoading(false));\n    }\n\n    <p>Enter data to search for movies.</p>;\n  }, [query]);\n\n  const handleSubmit = searchQuery => {\n    setSearchParams({ query: searchQuery });\n  };\n\n  return (\n    <>\n      <SearchForm handleSubmit={handleSubmit} />\n\n      {isLoading && <Loader />}\n      {searchMovies && <MoviesList movies={searchMovies} />}\n      {error && <p>Ooops! Something went wrong.</p>}\n    </>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["List","styled","MovieLink","Link","MoviesList","listName","movies","location","useLocation","map","id","title","to","state","from","mapper","poster","poster_path","api_key","axios","fetchTrendingMovies","params","data","results","fetchSearchMovie","query","fetchMovieById","paramName","resp","SearchForm","handleSubmit","onSubmit","e","preventDefault","value","target","elements","searchQuery","toLowerCase","trim","type","name","useState","searchMovies","setSearchMovies","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","get","useEffect","then","catch","finally","Loader"],"sourceRoot":""}